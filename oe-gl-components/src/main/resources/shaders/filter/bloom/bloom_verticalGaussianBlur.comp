#version 430 core

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0, rgba16f) uniform writeonly image2D verticalBloomBlurSampler0;
layout (binding = 1, rgba16f) uniform writeonly image2D verticalBloomBlurSampler1;
layout (binding = 2, rgba16f) uniform writeonly image2D verticalBloomBlurSampler2;
layout (binding = 3, rgba16f) uniform writeonly image2D verticalBloomBlurSampler3;

uniform sampler2D horizontalBloomBlurSampler0;
uniform sampler2D horizontalBloomBlurSampler1;
uniform sampler2D horizontalBloomBlurSampler2;
uniform sampler2D horizontalBloomBlurSampler3;
uniform float width;
uniform float height;
uniform float[4] downsamplingFactors;

const float gaussianKernel7_sigma2[7] = float[7](0.071303,0.131514,0.189879,0.214607,0.189879,0.131514,0.071303);
const float gaussianKernel9_sigma3[9] = float[9](0.063327,0.093095,0.122589,0.144599,0.152781,0.144599,0.122589,0.093095,0.063327);
const float gaussianKernel9_sigma4[9] = float[9](0.081812,0.101701,0.118804,0.130417,0.134535,0.130417,0.118804,0.101701,0.081812);
const float gaussianKernel9_sigma2[9] = float[9](0.028532,0.067234,0.124009,0.179044,0.20236,0.179044,0.124009,0.067234,0.028532);
const float gaussianKernel9_sigma1[9] = float[9](0.000229,0.005977,0.060598,0.241732,0.382928,0.241732,0.060598,0.005977,0.000229);

void main(void){

	ivec2 computeCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	vec2 uv = vec2(gl_GlobalInvocationID.x/width,gl_GlobalInvocationID.y/height);
	vec2 tmpUv = vec2(0);
	
	vec3 color0 = vec3(0,0,0);
	vec3 color1 = vec3(0,0,0);
	vec3 color2 = vec3(0,0,0);
	vec3 color3 = vec3(0,0,0);
	
	for (int i=0; i<9; i++){
		vec2 uvOffset = vec2(0,(i-4.0)/height);
		tmpUv = uv * downsamplingFactors[0] + uvOffset * downsamplingFactors[0];
		color0 += texture(horizontalBloomBlurSampler0, tmpUv).rgb * gaussianKernel9_sigma2[i];
		tmpUv = uv * downsamplingFactors[1] + uvOffset * downsamplingFactors[1];
		color1 += texture(horizontalBloomBlurSampler1, tmpUv).rgb * gaussianKernel9_sigma2[i];
		tmpUv = uv * downsamplingFactors[2] + uvOffset * downsamplingFactors[2];
		color2 += texture(horizontalBloomBlurSampler2, tmpUv).rgb * gaussianKernel9_sigma2[i];
		tmpUv = uv * downsamplingFactors[3] + uvOffset * downsamplingFactors[3];
		color3 += texture(horizontalBloomBlurSampler3, tmpUv).rgb * gaussianKernel9_sigma2[i];
	}

	imageStore(verticalBloomBlurSampler0, computeCoord, vec4(color0, 1.0));
	imageStore(verticalBloomBlurSampler1, computeCoord, vec4(color1, 1.0));
	imageStore(verticalBloomBlurSampler2, computeCoord, vec4(color2, 1.0));
	imageStore(verticalBloomBlurSampler3, computeCoord, vec4(color3, 1.0));
}